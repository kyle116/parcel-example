{"version":3,"sources":["js/app.js"],"names":["newsKey","newsSources","renderRows","data","article","document","createElement","innerHTML","img","url","title","author","classList","add","getElementById","appendChild","retrieveData","apiKey","rawResponse","fetch","ok","Error","message","status","jsonResponse","json","console","log","err","normalizeData","ArticleObj","i","length","cleanData","articles","forEach","result","push","urlToImage","children","thumbnail","init","sources","promises","Promise","all"],"mappings":";AAAA,IAAIA,EAAJ,mCACIC,EAAc,mFACkED,IAClF,mCA2EF,SAASE,EAAWC,GAmBdC,IAAAA,EAAUC,SAASC,cAAc,WACrCF,EAAQG,wEAEUJ,EAAKK,gGAGJL,EAAKM,YAAYN,EAAKO,6CACfP,EAAKQ,4IAO/BP,EAAQQ,UAAUC,IAAI,WACtBR,SAASS,eAAe,QAAQC,YAAYX,GAG9C,eAAeY,EAAaP,EAAKQ,GAC3B,IACIC,MAAAA,QAAoBC,MAAMV,GAE5B,IAACS,EAAYE,GACT,MAAA,IAAIC,MAAMH,EAAYI,SAG1BJ,GAAuB,MAAvBA,EAAYK,OACR,MAAA,IAAIF,MAAM,aAGZG,MAAAA,QAAqBN,EAAYO,OAEhCD,OADPE,QAAQC,IAAIH,GACLA,EACP,MAAOI,GACPF,QAAQC,IAAI,MAAOC,IAIvB,SAASC,EAAc1B,GAEZ2B,SAAAA,EAAWpB,EAAOC,EAAQF,EAAKD,GACjCE,KAAAA,MAAQA,EACRC,KAAAA,OAASA,EACTF,KAAAA,IAAMA,EACND,KAAAA,IAAMA,EALbkB,QAAQC,IAAI,OAAQxB,GASf,IAAA,IAAI4B,EAAI,EAAGA,EAAI5B,EAAK6B,OAAQD,IAAK,CAChCE,IAAAA,EAAY,GACP,IAANF,GACD5B,EAAK4B,GAAGG,SAASC,QAAQ,SAASC,GAChCH,EAAUI,KAAK,IAAIP,EAAWM,EAAO1B,MAAO0B,EAAOzB,OAAQyB,EAAO3B,IAAK2B,EAAOE,eAEhFnC,EAAK4B,GAAKE,GACI,IAANF,IACR5B,EAAK4B,GAAG5B,KAAKoC,SAASJ,QAAQ,SAASC,GACrCH,EAAUI,KAAK,IAAIP,EAAWM,EAAOjC,KAAKO,MAAO0B,EAAOjC,KAAKQ,OAAQyB,EAAOjC,KAAKM,IAAK2B,EAAOjC,KAAKqC,cAEpGrC,EAAK4B,GAAKE,GAGP9B,OAAAA,EAGT,eAAesC,EAAKC,GAEdC,IAAAA,EAAW,GACV,IAAA,IAAIZ,EAAI,EAAGA,EAAIW,EAAQV,OAAQD,IAClCY,EAASN,KAAKrB,EAAa0B,EAAQX,KAIrBF,QAFOe,QAAQC,IAAIF,IAKzBR,QAAQ,SAASO,GACzBA,EAAQP,QAAQ,SAASD,GACvBhC,EAAWgC,OAKjBO,EAAKxC","file":"app.435d3c1f.js","sourceRoot":"..","sourcesContent":["let newsKey = process.env.NEWS_API_KEY;\nlet newsSources = [\n  `https://cors.bridged.cc/https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`,\n  'https://www.reddit.com/top.json'\n];\n\n// API Call Examples\n// Fetch API Call with chain method\n// fetch(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`, {\n//   method: 'GET',\n// })\n//   .then(response => response.json())\n//   .then(json => console.log(json))\n//   .catch(err => console.log(err));\n\n// Example provided by News API\n// https://newsapi.org/docs/get-started\n// var url = 'http://newsapi.org/v2/top-headlines?' +\n//           'country=us&' +\n//           `apiKey=${newsKey}`;\n// var req = new Request(url);\n// console.log(req);\n// fetch(req)\n//   .then((response) => response.json()).then(json => console.log(json))\n\n  \n// Async Await Method, example from lesson 9\n// const fetchThings = async (url) => {\n//   try {\n//     // fetch the raw response\n//     const rawResponse = await fetch(url);\n\n//     // fetch only rejects for network error or connection issues\n\n//     // as a result, we need to handle different scenarios here\n//     // rawResponse.ok is true if status code is between 200 - 299\n//     if (!rawResponse.ok) {\n//       throw new Error(rawResponse);\n//     }\n\n//     // could also key off status directly\n//     if (rawResponse.status === 404) {\n//       throw new Error('Not found');\n//     }\n\n//     // if we made it this far, we're ok\n//     // parse response into json\n//     const jsonResponse = await rawResponse.json();\n\n//     // now we can do whatever we want with jsonResponse\n//     // add elements to DOM, make more requests, etc.\n//     console.log(jsonResponse);\n//     jsonResponse.articles.forEach(function(result) {\n//       console.log(result.title);\n//       renderRows(result.title);\n//     });\n//   } catch (err) {\n//     console.log('err', err);\n//   }\n// };\n// fetchThings(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`);\n\n\n// Reddit API with Proxy\n// let apiCall = fetch('https://cors.bridged.cc/https://www.reddit.com/top.json');\n\n// apiCall\n//   .then(res => res.json())\n//   .then(results => {\n//     console.log(results.data.children);\n//     results.data.children.forEach(function(result){\n//       // $('ul').append('<li>'+result.data.title+'</li>')\n//       renderRows(result.data.title);\n//     });\n    \n//   })\n//   .catch(err => console.log(err));\n\nfunction renderRows(data) {\n  // jQuery way\n  // $('#main').append(`\n  //   <article class=\"article\">\n  //     <section class=\"featuredImage\">\n  //       <img src=\"${data.img}\" alt=\"\" />\n  //     </section>\n  //     <section class=\"articleContent\">\n  //         <a href=\"${data.url}\"><h3>${data.title}</h3></a>\n  //         <h6>Lifestyle - ${data.author}</h6>\n  //     </section>\n  //     <section class=\"impressions\">\n  //       526\n  //     </section>\n  //     <div class=\"clearfix\"></div>\n  //   </article>\n  // `);\n\n  // Vanilla js way\n  let article = document.createElement('article');\n  article.innerHTML = `\n      <section class=\"featuredImage\">\n        <img src=\"${data.img}\" alt=\"\" />\n      </section>\n      <section class=\"articleContent\">\n          <a href=\"${data.url}\"><h3>${data.title}</h3></a>\n          <h6>Lifestyle - ${data.author}</h6>\n      </section>\n      <section class=\"impressions\">\n        526\n      </section>\n      <div class=\"clearfix\"></div>\n  `;\n  article.classList.add('article')\n  document.getElementById('main').appendChild(article);\n}\n\nasync function retrieveData(url, apiKey) {\n  try {\n    const rawResponse = await fetch(url);\n\n    if (!rawResponse.ok) {\n      throw new Error(rawResponse.message);\n    }\n\n    if (rawResponse.status === 404) {\n      throw new Error('Not found');\n    }\n\n    const jsonResponse = await rawResponse.json();\n    console.log(jsonResponse);\n    return jsonResponse;\n  } catch (err) {\n    console.log('err', err);\n  }\n}\n\nfunction normalizeData(data) {\n  console.log('data', data);\n  function ArticleObj(title, author, url, img) {\n    this.title = title;\n    this.author = author;\n    this.url = url;\n    this.img = img;\n    //impressions\n    //category\n  }\n  for (let i = 0; i < data.length; i++) {\n    let cleanData = [];\n    if(i === 0) {\n      data[i].articles.forEach(function(result) {\n        cleanData.push(new ArticleObj(result.title, result.author, result.url, result.urlToImage));\n      });\n      data[i] = cleanData;\n    } else if(i === 1) {\n      data[i].data.children.forEach(function(result) {\n        cleanData.push(new ArticleObj(result.data.title, result.data.author, result.data.url, result.data.thumbnail));\n      });\n      data[i] = cleanData;\n    }\n  }\n  return data;\n}\n\nasync function init(sources) {\n  // step 1 retrieve data\n  let promises = [];\n  for (let i = 0; i < sources.length; i++) {\n    promises.push(retrieveData(sources[i]));\n  }\n  const newsData = await Promise.all(promises);\n  // step 2 normalize data\n  let cleanData = normalizeData(newsData);\n\n  // step 3 render to dom\n  cleanData.forEach(function(sources) {\n    sources.forEach(function(articles) {\n      renderRows(articles);\n    });\n  });\n}\n\ninit(newsSources);"]}