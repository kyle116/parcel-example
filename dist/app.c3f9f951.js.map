{"version":3,"sources":["js/keys.js","js/app.js"],"names":["newsKey","newsSources","renderRows","data","article","document","createElement","innerHTML","img","url","title","author","classList","add","getElementById","appendChild","retrieveData","apiKey","rawResponse","fetch","ok","Error","message","status","jsonResponse","json","console","log","err","normalizeData","ArticleObj","i","length","cleanData","articles","forEach","result","push","urlToImage","children","thumbnail","init","sources","promises","newsData","Promise","all"],"mappings":"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","file":"app.c3f9f951.js","sourceRoot":"..","sourcesContent":["export const newsKey = '214b0c558498448797163c59349a0165';","import { newsKey } from './keys.js';\nlet newsSources = [\n  `https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`,\n  'https://www.reddit.com/top.json'\n];\n\n// API Call Examples\n// Fetch API Call with chain method\n// fetch(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`, {\n//   method: 'GET',\n// })\n//   .then(response => response.json())\n//   .then(json => console.log(json))\n//   .catch(err => console.log(err));\n\n// Example provided by News API\n// https://newsapi.org/docs/get-started\n// var url = 'http://newsapi.org/v2/top-headlines?' +\n//           'country=us&' +\n//           `apiKey=${newsKey}`;\n// var req = new Request(url);\n// console.log(req);\n// fetch(req)\n//   .then((response) => response.json()).then(json => console.log(json))\n\n  \n// Async Await Method, example from lesson 9\n// const fetchThings = async (url) => {\n//   try {\n//     // fetch the raw response\n//     const rawResponse = await fetch(url);\n\n//     // fetch only rejects for network error or connection issues\n\n//     // as a result, we need to handle different scenarios here\n//     // rawResponse.ok is true if status code is between 200 - 299\n//     if (!rawResponse.ok) {\n//       throw new Error(rawResponse);\n//     }\n\n//     // could also key off status directly\n//     if (rawResponse.status === 404) {\n//       throw new Error('Not found');\n//     }\n\n//     // if we made it this far, we're ok\n//     // parse response into json\n//     const jsonResponse = await rawResponse.json();\n\n//     // now we can do whatever we want with jsonResponse\n//     // add elements to DOM, make more requests, etc.\n//     console.log(jsonResponse);\n//     jsonResponse.articles.forEach(function(result) {\n//       console.log(result.title);\n//       renderRows(result.title);\n//     });\n//   } catch (err) {\n//     console.log('err', err);\n//   }\n// };\n// fetchThings(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${newsKey}`);\n\n\n// Reddit API with Proxy\n// let apiCall = fetch('https://cors.bridged.cc/https://www.reddit.com/top.json');\n\n// apiCall\n//   .then(res => res.json())\n//   .then(results => {\n//     console.log(results.data.children);\n//     results.data.children.forEach(function(result){\n//       // $('ul').append('<li>'+result.data.title+'</li>')\n//       renderRows(result.data.title);\n//     });\n    \n//   })\n//   .catch(err => console.log(err));\n\nfunction renderRows(data) {\n  // jQuery way\n  // $('#main').append(`\n  //   <article class=\"article\">\n  //     <section class=\"featuredImage\">\n  //       <img src=\"${data.img}\" alt=\"\" />\n  //     </section>\n  //     <section class=\"articleContent\">\n  //         <a href=\"${data.url}\"><h3>${data.title}</h3></a>\n  //         <h6>Lifestyle - ${data.author}</h6>\n  //     </section>\n  //     <section class=\"impressions\">\n  //       526\n  //     </section>\n  //     <div class=\"clearfix\"></div>\n  //   </article>\n  // `);\n\n  // Vanilla js way\n  let article = document.createElement('article');\n  article.innerHTML = `\n      <section class=\"featuredImage\">\n        <img src=\"${data.img}\" alt=\"\" />\n      </section>\n      <section class=\"articleContent\">\n          <a href=\"${data.url}\"><h3>${data.title}</h3></a>\n          <h6>Lifestyle - ${data.author}</h6>\n      </section>\n      <section class=\"impressions\">\n        526\n      </section>\n      <div class=\"clearfix\"></div>\n  `;\n  article.classList.add('article')\n  document.getElementById('main').appendChild(article);\n}\n\nasync function retrieveData(url, apiKey) {\n  try {\n    const rawResponse = await fetch(url);\n\n    if (!rawResponse.ok) {\n      throw new Error(rawResponse.message);\n    }\n\n    if (rawResponse.status === 404) {\n      throw new Error('Not found');\n    }\n\n    const jsonResponse = await rawResponse.json();\n    console.log(jsonResponse);\n    return jsonResponse;\n  } catch (err) {\n    console.log('err', err);\n  }\n}\n\nfunction normalizeData(data) {\n  console.log('data', data);\n  function ArticleObj(title, author, url, img) {\n    this.title = title;\n    this.author = author;\n    this.url = url;\n    this.img = img;\n    //impressions\n    //category\n  }\n  for (let i = 0; i < data.length; i++) {\n    let cleanData = [];\n    if(i === 0) {\n      data[i].articles.forEach(function(result) {\n        cleanData.push(new ArticleObj(result.title, result.author, result.url, result.urlToImage));\n      });\n      data[i] = cleanData;\n    } else if(i === 1) {\n      data[i].data.children.forEach(function(result) {\n        cleanData.push(new ArticleObj(result.data.title, result.data.author, result.data.url, result.data.thumbnail));\n      });\n      data[i] = cleanData;\n    }\n  }\n  return data;\n}\n\nasync function init(sources) {\n  // step 1 retrieve data\n  let promises = [];\n  for (let i = 0; i < sources.length; i++) {\n    promises.push(retrieveData(sources[i]));\n  }\n  const newsData = await Promise.all(promises);\n  // step 2 normalize data\n  let cleanData = normalizeData(newsData);\n\n  // step 3 render to dom\n  cleanData.forEach(function(sources) {\n    sources.forEach(function(articles) {\n      renderRows(articles);\n    });\n  });\n}\n\ninit(newsSources);"]}